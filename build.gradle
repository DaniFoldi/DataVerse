plugins {
    id 'java'
    id 'net.kyori.blossom' version '1.3.1'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'maven-publish'
}

group 'com.danifoldi'
version '0.4.1'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
    google()
    maven { url 'https://repo.danifoldi.com/repository/maven-releases/' }
    maven { url 'https://papermc.io/repo/repository/maven-public/' }
    maven { url 'https://nexus.velocitypowered.com/repository/maven-public/' }
}

dependencies {
    // platforms
    compileOnly 'io.github.waterfallmc:waterfall-api:1.19-R0.1-SNAPSHOT'
    compileOnly 'io.papermc.paper:paper-api:1.19.2-R0.1-SNAPSHOT'
    compileOnly 'com.velocitypowered:velocity-api:3.1.1'
    annotationProcessor 'com.velocitypowered:velocity-api:3.1.1'

    // db connectors
    implementation 'com.danifoldi:DML:1.0.2'
    implementation ('com.zaxxer:HikariCP:5.0.1') {
        exclude module: 'slf4j-api'
    }
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.0.8'
    implementation 'org.mongodb:mongo-java-driver:3.12.11'
    implementation 'mysql:mysql-connector-java:8.0.30'

    // inject system
    implementation 'javax.inject:javax.inject:1'
    implementation 'com.google.dagger:dagger:2.44.2'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.44'

    // intellij
    compileOnly 'org.jetbrains:annotations:23.0.0'
}

processResources {
    from('src/main/resources') {
        expand(version: project.version)
        duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    }
}

blossom {
    replaceTokenIn('src/main/java/com/danifoldi/dataverse/platform/velocity/DataVersePlugin.java')
    replaceToken '@version@', project.version
}

shadowJar {
    //minimize()

    relocate 'com.zaxxer.hikari', 'com.danifoldi.dataverse.lib.hikari'
    relocate 'com.danifoldi.dml', 'com.danifoldi.dataverse.lib.dml'
    relocate 'org.mariadb', 'com.danifoldi.dataverse.lib.mariadb'
    relocate 'com.mongodb', 'com.danifoldi.dataverse.lib.mongodb'
    relocate 'com.google.protobuf', 'com.danifoldi.dataverse.lib.protobuf'
    relocate 'google.protobuf', 'com.danifoldi.dataverse.lib.protobuf2'
    relocate 'com.mysql', 'com.danifoldi.dataverse.lib.mysql'
    relocate 'org.bson', 'com.danifoldi.dataverse.lib.bson'
    relocate 'javax.inject', 'com.danifoldi.dataverse.lib.inject'
    relocate 'dagger', 'com.danifoldi.dataverse.lib.dagger'

    getArchiveFileName().set("${project.name}-${project.version}.jar")
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'DataVerse'
            from components.java
            artifact sourcesJar

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'DataVerse'
                description = 'A database engine supporting many platforms'
                url = 'https://github.com/DaniFoldi/DataVerse'
            }

            pom.withXml {
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime'  && project.configurations.default.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
            def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}