plugins {
    id 'java'
    id 'maven-publish'
}

group 'com.danifoldi'
version '0.7.1'

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

repositories {
    mavenCentral()
    google()
    maven { url 'https://repo.danifoldi.com/repository/maven-releases/' }
}

dependencies {
    // internal libraries
    implementation 'com.danifoldi:microbase:0.7.1'

    // typetoken
    implementation ('com.google.guava:guava:31.1-jre') {
        exclude module: 'gson'
        exclude module: 'error_prone_annotations'
        exclude module: 'jsr305'
        exclude module: 'failureaccess'
        exclude module: 'listenablefuture'
        exclude module: 'j2objc-annotations'
        exclude module: 'checker-qual'
    }

    // intellij
    compileOnly 'org.jetbrains:annotations:23.1.0'
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'DataVerse'
            from components.java
            artifact sourcesJar

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'DataVerse'
                description = 'A database engine supporting many platforms'
                url = 'https://github.com/DaniFoldi/DataVerse'
            }

            pom.withXml {
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime'  && project.configurations.default.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
            def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}